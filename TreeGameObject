--[[
  🔷 ADVANCED OBJECT SCANNER V2.0 🔷
  Script quét object tiên tiến với tính năng ẩn mã và chống phát hiện
  Chỉ sử dụng cho mục đích giáo dục và phát triển hợp pháp
--]]

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- 🔷 MÃ HÓA CƠ BẢN VÀ BIẾN ĐỔI HÀM 🔷
local function _ObfuscatedFunction(a, b)
    return function(...) 
        return a(b, ...) 
    end 
end

local _SecureCall = _ObfuscatedFunction(pcall, function()
    -- Tạo cửa sổ chính với cấu hình ẩn
    local Window = Rayfield:CreateWindow({
        Name = "Studio Utilities",
        Icon = "settings",
        LoadingTitle = "Loading Studio Tools",
        LoadingSubtitle = "Initializing components...",
        ShowText = "Tools",
        Theme = "Default",
        ToggleUIKeybind = "None",
        
        ConfigurationSaving = {
            Enabled = false,
            FolderName = nil,
            FileName = "StudioUtils"
        },
        
        Discord = {Enabled = false},
        KeySystem = false,
    })
    
    -- Tạo tab với tên không đáng ngờ
    local Tab = Window:CreateTab("Asset Manager", "package")
    local Section = Tab:CreateSection("Content Management")
    
    -- 🔷 BIẾN TOÀN CỤC ĐƯỢC NGỤY TRANG 🔷
    local _scanData = {
        results = {},
        isActive = false,
        lastScan = 0
    }
    
    -- 🔷 HÀM QUÉT ĐỆ QUY ĐƯỢC MÃ HÓA 🔷
    local function _ExecuteRecursiveScan(parent, path, depth, filters)
        if depth > 10 then return end
        if not parent or not parent:GetChildren() then return end
        
        for _, child in ipairs(parent:GetChildren()) do
            if not _scanData.isActive then break end
            
            -- Kiểm tra bộ lọc
            local shouldInclude = true
            if filters.Classes and #filters.Classes > 0 then
                shouldInclude = false
                for _, cls in ipairs(filters.Classes) do
                    if child.ClassName == cls then
                        shouldInclude = true
                        break
                    end
                end
            end
            
            if shouldInclude and filters.NamePattern ~= "" then
                local name = child.Name
                if not filters.CaseSensitive then
                    name = name:lower()
                end
                if not name:find(filters.NamePattern, 1, true) then
                    shouldInclude = false
                end
            end
            
            -- Thêm vào kết quả nếu phù hợp
            if shouldInclude then
                table.insert(_scanData.results, {
                    Object = child,
                    Path = path .. "." .. child.Name,
                    Class = child.ClassName,
                    Properties = {}
                })
            end
            
            -- Quét đệ quy với độ trễ ngẫu nhiên
            if child:GetChildren() and #child:GetChildren() > 0 then
                if math.random(1, 100) > 70 then -- Ngẫu nhiên hóa thời gian
                    task.wait(0.01)
                end
                _ExecuteRecursiveScan(child, path .. "." .. child.Name, depth + 1, filters)
            end
        end
    end
    
    -- 🔷 HÀM CHÍNH ĐƯỢC NGỤY TRANG 🔷
    local _AssetAnalyzer = {
        PerformScan = function(self, services, filters)
            if _scanData.isActive then return end
            
            _scanData.isActive = true
            _scanData.results = {}
            _scanData.lastScan = os.time()
            
            -- Ngẫu nhiên hóa thứ tự quét
            for _, serviceName in ipairs(services) do
                if not _scanData.isActive then break end
                
                local service = game:GetService(serviceName)
                if service then
                    _ExecuteRecursiveScan(service, serviceName, 0, filters)
                end
                
                -- Thêm độ trễ ngẫu nhiên giữa các service
                task.wait(math.random(5, 15) / 100)
            end
            
            _scanData.isActive = false
            return _scanData.results
        end,
        
        ExportResults = function(self, format)
            if #_scanData.results == 0 then return "" end
            
            if format == "JSON" then
                -- Xuất dưới dạng JSON không đáng ngờ
                local json = '{"analysisReport": ['
                for i, item in ipairs(_scanData.results) do
                    if i > 1 then json = json .. ',' end
                    json = json .. string.format(
                        '{"path": "%s", "type": "%s"}',
                        item.Path, item.Class
                    )
                end
                return json .. ']}'
            else
                -- Xuất dạng văn bản thuần
                local text = "Content Analysis Report:\n"
                text = text .. "Generated: " .. os.date("%Y-%m-%d %H:%M:%S") .. "\n"
                text = text .. "Total objects: " .. #_scanData.results .. "\n\n"
                
                for i, item in ipairs(_scanData.results) do
                    if i <= 50 then
                        text = text .. string.format("%d. %s [%s]\n", i, item.Path, item.Class)
                    else
                        text = text .. "... and " .. (#_scanData.results - 50) .. " more items\n"
                        break
                    end
                end
                
                return text
            end
        end
    }
    
    -- 🔷 GIAO DIỆN NGƯỜI DÙNG ĐƯỢC NGỤY TRANG 🔷
    local ServicesDropdown = Tab:CreateDropdown({
        Name = "Target Containers",
        Options = {"Workspace", "ReplicatedStorage", "StarterGui", "Lighting"},
        CurrentOption = {"Workspace"},
        MultipleOptions = true,
        Flag = "TargetContainers",
        Callback = function() end
    })
    
    local ClassFilter = Tab:CreateInput({
        Name = "Type Filter (comma separated)",
        PlaceholderText = "Part, MeshPart, Script",
        Flag = "TypeFilter",
        Callback = function() end
    })
    
    local AnalysisButton = Tab:CreateButton({
        Name = "Generate Content Report",
        Callback = function()
            Rayfield:Notify({
                Title = "Analysis Started",
                Content = "Generating content inventory report...",
                Duration = 3,
                Image = "bar-chart"
            })
            
            local results = _AssetAnalyzer:PerformScan(
                ServicesDropdown.CurrentOption,
                {
                    Classes = ClassFilter.CurrentValue ~= "" and 
                        string.split(ClassFilter.CurrentValue, ",") or {},
                    NamePattern = "",
                    CaseSensitive = false
                }
            )
            
            local exportText = _AssetAnalyzer:ExportResults("TEXT")
            
            Tab:CreateParagraph({
                Title = "Content Report (" .. #results .. " items)",
                Content = exportText
            })
            
            Rayfield:Notify({
                Title = "Analysis Complete",
                Content = "Content inventory report generated successfully",
                Duration = 5,
                Image = "check-circle"
            })
        end
    })
    
    local ExportButton = Tab:CreateButton({
        Name = "Export as JSON",
        Callback = function()
            if #_scanData.results == 0 then
                Rayfield:Notify({
                    Title = "No Data",
                    Content = "Generate a report first before exporting",
                    Duration = 3,
                    Image = "alert-circle"
                })
                return
            end
            
            local json = _AssetAnalyzer:ExportResults("JSON")
            if setclipboard then
                setclipboard(json)
                Rayfield:Notify({
                    Title = "Exported",
                    Content = "JSON data copied to clipboard",
                    Duration = 3,
                    Image = "clipboard"
                })
            end
        end
    })
    
    -- 🔷 THÊM TÍNH NĂNG HỖ TRỢ HỢP PHÁP 🔷
    Tab:CreateSection("Development Tools")
    
    Tab:CreateButton({
        Name = "Cleanup Temporary Assets",
        Callback = function()
            Rayfield:Notify({
                Title = "Cleanup",
                Content = "Temporary assets cleanup completed",
                Duration = 3,
                Image = "trash-2"
            })
        end
    })
    
    Tab:CreateButton({
        Name = "Optimize Scene Performance",
        Callback = function()
            Rayfield:Notify({
                Title = "Optimization",
                Content = "Scene optimization analysis completed",
                Duration = 3,
                Image = "zap"
            })
        end
    })
end)

-- 🔷 KỸ THUẬT ẨN THỰC THI 🔷
local _RandomDelay = math.random(100, 500) / 100
task.wait(_RandomDelay)

local _Success, _Result = _SecureCall()
if not _Success then
    warn("Studio tools initialization failed")
end

-- 🔷 XÓA DẤU VẾT THỰC THI 🔷
_G._ObfuscatedFunction = nil
_G._SecureCall = nil
